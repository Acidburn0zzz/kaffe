#
# Java core library component.
#
# Copyright (c) 1997, 1998, 1999
#      Transvirtual Technologies, Inc.  All rights reserved.
#
# Copyright (c) 2002, 2003, 2005
#      Kaffe.org contributors.
#
# See the file "license.terms" for information on usage and redistribution
# of this file.
#
# Class libraries are currently part of the integrate Make cycle. 
# Read FAQ/FAQ.classlibrary-compile for more information on the class library
# build process.
#
# Note: Makefile.am is generated from Makefile.am.in using 
# developers/update-class-list (called from developers/autogen.sh)
#
# Yes, it's slightly insane:
#
#   Makefile.am.in -> Makefile.am -> Makefile.in -> Makefile

# Only build the peerless AWT libraries if kaffe is configured to
# build the native libraries as well.
if COND_KAFFE_QT_AWT
MAYBE_PEERLESS_KAFFE_AWT=awt-implementations
else
if COND_KAFFE_X_AWT
MAYBE_PEERLESS_KAFFE_AWT=awt-implementations
endif
endif

# Only build gmp java.math libraries if kaffe is configured
# to build the native libraries as well.
if COND_PURE_JAVA_MATH
else
MAYBE_GMP_JAVA_MATH=gmp-math
endif

SUBDIRS = . $(MAYBE_PEERLESS_KAFFE_AWT) $(MAYBE_GMP_JAVA_MATH)

SRCDIRS = com gnu java javax kaffe org

installed_properties = \
	logging.properties

jrelib_DATA = \
	rt.jar \
	tools.jar \
	$(installed_properties)

Klasses_jar_SRCS = \
	# The following will be replaced by the
	# developers/update-class-list script with a
	# list of the packages and classes we want
	# to build


## Do not delete the previous blank line; update-class-list depends on it

gnu_regexp_message_bundles = \
	gnu/regexp/MessagesBundle_fr.properties \
	gnu/regexp/MessagesBundle_it.properties \
	gnu/regexp/MessagesBundle.properties

gnu_getopt_message_bundles = \
	gnu/getopt/MessagesBundle_cs.properties \
       	gnu/getopt/MessagesBundle_ja.properties \
	gnu/getopt/MessagesBundle_de.properties \
       	gnu/getopt/MessagesBundle_nl.properties \
	gnu/getopt/MessagesBundle_fr.properties \
       	gnu/getopt/MessagesBundle_no.properties \
	gnu/getopt/MessagesBundle_hu.properties \
       	gnu/getopt/MessagesBundle.properties

classpath_resources = \
	java/util/iso4217.properties

EXTRA_DIST = \
	Makefile.am.in \
	META-INF \
	all.files \
	$(OMITTED_PACKAGES_SRCS) \
	$(installed_properties)

LIBDIR = lib

dist-hook:
	mkdir -p $(distdir)
	cp -dfR $(srcdir)/com $(srcdir)/gnu $(srcdir)/java $(srcdir)/javax $(srcdir)/org $(srcdir)/kaffe $(distdir)
	rm -rf `find $(distdir) -name CVS`
	rm -rf `find $(distdir) -name *~`
	rm -f  $(distdir)/gnu/classpath/Configuration.java

clean-local:
	rm -rf $(LIBDIR) rt.jar tools.jar

.PHONY: new-classes
new-classes: $(top_srcdir)/developers/update-class-list
	cd $(srcdir) && $(SHELL) $(top_srcdir)/developers/update-class-list

rebuildLib = ./rebuildLib

.PHONY: compile-classes classes

JAR_CMD1 = (cd $(srcdir) && $(ZIP) -q -r $(CURDIR)/$@.new META-INF)
JAR_CMD2 = (cd $(LIBDIR) && $(ZIP) -q -DX -r $(CURDIR)/$@.new $(SRCDIRS) -x gnu/bytecode/*.class -x gnu/classpath/tools/javap/*.class)
JAR_CMD3 = (cd $(srcdir) && $(ZIP) -q -DX -r $(CURDIR)/$@.new $(gnu_regexp_message_bundles))
JAR_CMD4 = (cd $(srcdir) && $(ZIP) -q -DX -r $(CURDIR)/$@.new $(gnu_getopt_message_bundles))
JAR_CMD5 = (cd $(srcdir) && $(ZIP) -q -DX -r $(CURDIR)/$@.new $(classpath_resources))
JAR_CMD6 = (cd $(LIBDIR) && $(ZIP) -q -r $(CURDIR)/$@.new gnu/bytecode gnu/classpath/tools/javap)

.PHONY: jar-classes
if USE_PRECOMPILED_RT_JAR
jar-classes: rt.jar
rt.jar: $(PATH_TO_RT_JAR)
	cp $< $@

compile-tools-classes $(LIBDIR)/stamp: $(rebuildLib) $(gnu_bytecode_SRCS) $(gnu_classpath_tools_javap_SRCS)
	rm -rf $(LIBDIR)
	mkdir $(LIBDIR)
	$(SHELL) $(rebuildLib) $(gnu_bytecode_SRCS) $(gnu_classpath_tools_javap_SRCS) `cd $(LIBDIR) && pwd`/../gnu/classpath/Configuration.java
	echo timestamp > $(LIBDIR)/stamp

tools.jar: $(LIBDIR)/stamp $(gnu_bytecode_SRCS)
	rm -f tools.jar
	$(JAR_CMD6)
	mv $@.new $@
else
## classes is provided for backward compatibility; use compile-classes
compile-classes $(LIBDIR)/stamp classes: $(rebuildLib) $(Klasses_jar_SRCS)
	rm -rf $(LIBDIR)
	mkdir $(LIBDIR)
	if test "$(PROFILE)" = default; then \
		$(SHELL) $(rebuildLib) @all.files `cd $(LIBDIR) && pwd`/../gnu/classpath/Configuration.java; \
	else \
		$(SHELL) $(rebuildLib) @$(PROFILE) `cd $(LIBDIR) && pwd`/../gnu/classpath/Configuration.java; \
	fi
	echo timestamp > $(LIBDIR)/stamp

jar-classes: rt.jar
rt.jar: $(LIBDIR)/stamp $(Klasses_jar_SRCS)
	rm -f rt.jar
	$(JAR_CMD1)
	$(JAR_CMD2)
	$(JAR_CMD3)
	$(JAR_CMD4)
	$(JAR_CMD5)
	mv $@.new $@

# Put gnu.bytecode into tools.jar to avoid problems
# with applications using their own version of it.
tools.jar: $(LIBDIR)/stamp $(gnu_bytecode_SRCS)
	rm -f tools.jar
	$(JAR_CMD6)
	mv $@.new $@
endif

.PHONY: build-classes Klasses
build-classes Klasses: rt.jar

all-am: rebuildLib
export JIKES top_builddir LIBDIR srcdir

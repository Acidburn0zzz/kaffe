/* DO NOT EDIT THIS FILE - it is machine generated */
#include <native.h>

#ifndef _Included_java_math_BigInteger
#define _Included_java_math_BigInteger

#ifdef __cplusplus
extern "C" {
#endif

/* Header for class java_math_BigInteger */

typedef struct Classjava_math_BigInteger {
  jint signum;
  HArrayOfByte* magnitude;
  jint bitCount;
  jint bitLength;
  jint firstNonzeroByteNum;
  jint lowestSetBit;
} Classjava_math_BigInteger;
HandleTo(java_math_BigInteger);

extern void java_math_BigInteger_plumbInit(void);
extern HArrayOfByte* java_math_BigInteger_plumbAdd(HArrayOfByte*, HArrayOfByte*);
extern struct Hjava_math_BigInteger* java_math_BigInteger_plumbSubtract(HArrayOfByte*, HArrayOfByte*);
extern HArrayOfByte* java_math_BigInteger_plumbMultiply(HArrayOfByte*, HArrayOfByte*);
extern HArrayOfByte* java_math_BigInteger_plumbDivide(HArrayOfByte*, HArrayOfByte*);
extern HArrayOfByte* java_math_BigInteger_plumbRemainder(HArrayOfByte*, HArrayOfByte*);
extern HArrayOfArray* java_math_BigInteger_plumbDivideAndRemainder(HArrayOfByte*, HArrayOfByte*);
extern HArrayOfByte* java_math_BigInteger_plumbGcd(HArrayOfByte*, HArrayOfByte*);
extern HArrayOfByte* java_math_BigInteger_plumbModPow(HArrayOfByte*, HArrayOfByte*, HArrayOfByte*);
extern HArrayOfByte* java_math_BigInteger_plumbModInverse(HArrayOfByte*, HArrayOfByte*);
extern HArrayOfByte* java_math_BigInteger_plumbSquare(HArrayOfByte*);

#ifdef __cplusplus
}
#endif

#endif

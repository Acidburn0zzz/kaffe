#! /bin/sh
#
# Perform a standard set of test on the Kaffe system.  This script should
# be built up as we add more test and so, hopefully, avoid re-releasing
# bugs which have been fixed.
#
# Copyright (c) 1996, 1997, 1998, 1999
#	Transvirtual Technologies, Inc.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution 
# of this file. 

: ${RESULT=/tmp/kaffer.$$} ${CHECK=/tmp/kaffec.$$}
: ${JAVA=kaffe} ${SRCDIR=@srcdir@} ${PATHSEP='@PATHSEP@'}
test -z "@JIKES@" || : ${JIKES="@JIKES@ -nowarn"}
: ${JAVAC=${JIKES-"$JAVA pizza.compiler.Main"}" -classpath .$PATHSEP$SRCDIR$PATHSEP$SRCDIR/../../libraries/javalib/Klasses.jar$PATHSEP$CLASSPATH"}
overallerror=0
error=0

cd `echo $0 | sed -e 's,^[^/]*$,.,' -e 's,/[^/]*$,,'`

trap "rm -f $RESULT $CHECK; exit 1" 1 2 15

echo_n_sp ()
{
	echo ${1+"$@"} | tr '\012' ' '
}

compile()
{
	FILES=`for f in ${1+"$@"}; do echo $SRCDIR/$f.java; done`
	echo ERROR > ${RESULT}
	if test "$DEPRECATED" = "yes" ; then
		NOWARN="-nowarn"
	else
		NOWARN=""
	fi
	${JAVAC} ${NOWARN} -d . ${FILES} >${RESULT} 2>&1
	if test "$DEPRECATED" = "yes" ; then
		OUTPUT=`cat ${RESULT} | grep -v warning`
	else
		OUTPUT=`cat ${RESULT}`
	fi
	if test "${OUTPUT}" != "" ; then
		echo "error compiling:"
		cat ${RESULT}
		error=1
	fi
	rm -f ${RESULT}
}

#
# Run a test, optionally sorted
#
run()
{
	echo ERROR > $RESULT
	if test "x$SORT" = "xyes"; then
	    $JAVA $* 2>&1 | sort > $RESULT
	else
	    $JAVA $* > $RESULT 2>&1
	fi
	if cmp -s $RESULT $SRCDIR/$1.out ; then
		:
	else
		cp $RESULT $1.fail
		error=1
	fi
	rm -f $RESULT
}

#
# options
# 	-deprecated:	use -nowarn
#	-sort:		sort output
#	-nocompile:	don't compile, just run
#
runtest()
{
	SORT="no";
	DEPRECATED="no";
	NOCOMPILE="no";
	while [ $# -gt 0 ]; do
	    case "$1" in
	      -sort)
		SORT="yes"
		shift
		;;
	      -nocompile)
		NOCOMPILE="yes"
		shift
		;;
	      -deprecated)
		DEPRECATED="yes"
		shift
		;;
	      *)
		break
		;;
	    esac
	done
	error=0
	echo_n_sp "$1 ..." 1>&2
	if test "x$NOCOMPILE" != "xyes"; then
		compile $1
	fi
	if test $error = 0 ; then
		run $*
	fi
	# reset global (ugh) variables
	SORT="no";
	DEPRECATED="no";
	if test $error = 0 ; then
		echo "passed" 1>&2
	else
		echo "failed: output saved to $1.fail" 1>&2
		overallerror=1
	fi
}

ignoretest()
{
	error=0
	echo "$1 ... ignored" 1>&2
}

# Simple health check
cp $SRCDIR/HelloWorldApp.class.save HelloWorldApp.class
run HelloWorldApp

# Now test the compiler
rm -f HelloWorldApp.class
runtest HelloWorldApp

# Test ints, longs, floats and doubles
runtest TestIntLong
ignoretest TestFloatDouble
runtest ModuloTest

# Test strings
runtest Str
runtest Str2
runtest InternHog

# Test exceptions
runtest IndexTest
runtest StackDump

# Test threads
runtest tname
runtest ttest
runtest ThreadInterrupt
runtest UncaughtException

# Misc tests
runtest ReflectInterfaces
runtest TestSerializable
runtest NullPointerTest
runtest LostFrame
runtest ConstructorTest
runtest burford
runtest IllegalInterface
runtest GetInterfaces
runtest DeadThread
runtest SignedShort
runtest CharCvt
runtest BadFloatTest
runtest ExecTest
runtest ProcessTest
runtest UDPTest
runtest wc < $SRCDIR/wc.java

runtest finaltest
echo_n_sp "finaltest2 ..." 1>&2
compile finaltest2
if test $error = 0 ; then
	run finaltest
fi
if test $error = 0 ; then
	echo "passed" 1>&2
else
	overallerror=1
fi

runtest forNameTest
runtest KaffeVerifyBug
runtest Schtum
runtest tthrd1
runtest Reflect 
runtest MethodBug
runtest Bean

#
# simple test for Method.invoke
#
runtest ReflectInvoke

#
# simple test for InvocationTargetExceptions
#
runtest InvTarExcTest

#
# tests for ClassLoader
# this test must be compiled with 'nowarn' because it uses a
# deprecated API (defineClass with 3 params)
#

# compile the example class
compile Hello

runtest -deprecated CLTest

compile CLTestConc_run
runtest -deprecated CLTestConc
runtest CLTestJLock
runtest CLTestLie
runtest CLTestFindLoaded

compile ExceptionTest
runtest ExceptionTestClassLoader
runtest ExceptionTestClassLoader2

# Garbage collection tests
compile ClassGC ClassGCTest ClassGCTestLater
runtest -nocompile ClassGC

# These tests must have their output sorted, because they're multi-threaded.
runtest -sort GCTest
runtest -sort ThreadLocalTest

# This one is sorted cause it the order of its output is not defined by the spec
runtest -sort BeanBug

runtest BitSetTest 
runtest ExceptionInInitializerTest
runtest InitTest
runtest ProcessClassTest
runtest ProcessClassInst
runtest -deprecated ProcessClassStop
runtest FindSystemClass
runtest ProcessClassLockTest
runtest DoubleBug
runtest Overflow
runtest TestUnlock
runtest MarkResetTest
runtest HashtableTest1

# All done okay
exit $overallerror

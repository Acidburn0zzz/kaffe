More info on this patch:

	http://www.kaffe.org/pipermail/kaffe/2003-July/043088.html
	http://www.kaffe.org/pipermail/kaffe/2003-July/043093.html

This should be merged upstream to kopi.

diff -x 'KjcScanner*' -ru kopi-2.1B.orig/src/bytecode/ssa/LivenessComputer.java 
kopi-2.1B/src/bytecode/ssa/LivenessComputer.java
--- kopi-2.1B.orig/src/bytecode/ssa/LivenessComputer.java	2002-07-15 19:53:29.000000000 +0100
+++ kopi-2.1B/src/bytecode/ssa/LivenessComputer.java	2003-07-10 19:18:06.000000000 +0100
@@ -334,7 +334,7 @@
 		if (phi instanceof QPhiCatch) {
 
 		    //compute temp = (use[ij] - def[i1i2..i(j-1)]).
-		    temp.clear();
+		    for (int u=0;u<temp.size();u++) temp.clear(u);;
 		    QOperandBox[] operands = phi.getUses();
 		    for (int u = 0; u < operands.length; ++u) {
 			if (operands[u].getOperand() instanceof QSSAVar) {
@@ -360,7 +360,7 @@
 	    while (insts.hasNext()) {
 
 		//compute temp = (use[ij] - def[i1i2..i(j-1)]).
-		temp.clear();
+		for (int u=0;u<temp.size();u++) temp.clear(u);;
 		QInst inst = (QInst) insts.next();
 		QOperandBox[] operands = inst.getUses();
 		for (int u = 0; u < operands.length; ++u) {
@@ -434,7 +434,7 @@
 
 
 		//out[n] = union {s in succ[n]}  in[s]
-		out.clear();
+		for (int u=0;u<out.size();u++) out.clear(u);
 		Iterator succs = nodes[nodeIndex].getSuccessors();
 		while (succs.hasNext()) {
 		    out.or(ins[((Node)succs.next()).getIndex()]);
@@ -491,7 +491,7 @@
 	    while (insts.hasNext()) {
 
 		//compute temp = (use[ij] - def[i1i2..i(j-1)]).
-		temp.clear();
+		for (int u=0;u<temp.size();u++) temp.clear(u);
 		QInst inst = (QInst) insts.next();
 		QOperandBox[] operands = inst.getUses();
 		for (int u = 0; u < operands.length; ++u) {
@@ -530,7 +530,7 @@
 
 
 		//out[n] = union {s in succ[n]}  in[s]
-		out.clear();
+		for (int u=0;u<out.size();u++) out.clear(u);
 		Iterator succs = nodes[nodeIndex].getSuccessors();
 		while (succs.hasNext()) {
 		    out.or(ins[((Node)succs.next()).getIndex()]);
diff -x 'KjcScanner*' -ru kopi-2.1B.orig/src/kjc/CBlockContext.java 
kopi-2.1B/src/kjc/CBlockContext.java
--- kopi-2.1B.orig/src/kjc/CBlockContext.java	2002-07-15 19:53:32.000000000 +0100
+++ kopi-2.1B/src/kjc/CBlockContext.java	2003-07-12 07:38:44.000000000 +0100
@@ -59,6 +59,8 @@
     this.localVars = localVars == 0 ? null : new ArrayList(localVars);
     this.localsPosition = 0;
     this.parentIndex = 0;
+    this.localsIndex = 0;
+    this.childrenBlock = null;
   }
 
   /**
@@ -81,11 +83,15 @@
     super(parent, environment);
 
     this.localVars = new ArrayList(predictedVars);
+    this.childrenBlock = null;
 
     CBlockContext	parentBlock = parent.getBlockContext();
 
     this.localsPosition = parentBlock.localsPosition();
+    this.localsIndex = 0;
     this.parentIndex = parentBlock.localsIndex();
+
+    parentBlock.registerChildBlock(this);
   }
 
   // ----------------------------------------------------------------------
@@ -165,6 +171,41 @@
     localsPosition += var.getType().getSize();
   }
 
+  public void registerChildBlock(CBlockContext child) {
+     if (childrenBlock == null) {
+	 childrenBlock = new ArrayList();
+     }
+     childrenBlock.add(child);
+  }
+
+  /**
+   * Fix the position of local variables as a monitor variable has been
+   * added to the stack.
+   * 
+   * @param     incr     the update increment for local variables
+   */
+  public void fixVariablePositions(int increment) throws UnpositionedError {
+       localsPosition += increment;
+       parentIndex++;
+       for (int i=0; i < localVars.size(); i++) {
+           JLocalVariable  localVar = (JLocalVariable) localVars.get(i);
+
+           localVar.setPosition(localVar.getPosition()+increment);
+        // fix 27.03.02 lackner
+        // synthetic variable has no entry in CVariableInfo
+        // not necessary  think
+        //  localVar.setIndex(localVar.getIndex()+1);
+       }
+
+       if (childrenBlock != null) {
+         for (int i=0; i < childrenBlock.size(); i++) {
+	   CBlockContext child = (CBlockContext)childrenBlock.get(i);
+	   
+	   child.fixVariablePositions(increment);
+         }
+       }
+  }
+
   /**
    * Adds the variable for the monitor of the synchronized statement to the 
    * correct context.
@@ -173,23 +214,18 @@
    */
   public void addMonitorVariable(JLocalVariable var)  throws UnpositionedError {
     if (parent instanceof CMethodContext) {
+      int increment = var.getType().getSize();
+
       addVariable(var);
+      if (childrenBlock != null) {
+        for (int i=0; i < childrenBlock.size(); i++) {
+	   CBlockContext child = (CBlockContext)childrenBlock.get(i);
+	   
+	   child.fixVariablePositions(increment);
+        }
+      }
     } else {
       parent.addMonitorVariable(var);
-      // correct index
-      int       size = var.getType().getSize();
-
-      localsPosition += size;
-      parentIndex++;
-      for (int i=0; i < localVars.size(); i++) {
-        JLocalVariable  localVar = (JLocalVariable) localVars.get(i);
-
-        localVar.setPosition(localVar.getPosition()+size);
-        // fix 27.03.02 lackner
-        // synthetic variable has no entry in CVariableInfo
-        // not necessary  think
-        //  localVar.setIndex(localVar.getIndex()+1);
-      }
     }
   }
   /**
@@ -287,6 +323,7 @@
 
   private Hashtable				localClasses;
   private ArrayList				localVars;
+  private ArrayList				childrenBlock;
 
   private /*final*/ int				parentIndex;
   private int					localsIndex;

	  				

	
	


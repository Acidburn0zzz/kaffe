NOTES ABOUT THE BeOS PORT
=========================
The BeOS port requires BeOS R4 or higher.  It uses its own threading
system designated "beos-native".  The "unix-jthreads" system can be
made to work for the most part; however, that system relies on
asynchronous I/O notifications, as well as virtual timer alarms, both
of which are absent on BeOS R4.

beos-native was modeled upon the oskit-pthreads system, which relies
on mutexes and condition variables.  BeOS has the former, but not the
latter, so I defined a condition variable type based upon an article I
found posted on the Web [1].  The implementation has since been corrected
with the help of Chris Tate of Be DTS [2].

To build Kaffe for BeOS, you must configure Kaffe as follows:

	./configure --prefix=<insert-your-prefix-here>

Oddly enough, the executables produced are roughly the same size whether
or not the "--disable-shared" flag is supplied, leading me to believe
that libtool isn't doing what it should to truly support shared libs.
Nonetheless, Kaffe appears to work properly with or without the flag.

As of 15 August 1999, AWT for Kaffe is under development by the BeKaffe
group, from whom patches are available.  These patches will be submitted
for inclusion into the Kaffe source tree at a later date.

Also, the following entry points in the jthread interface have yet to be
implemented:

	jthread_suspendall
	jthread_unsuspendall
	jthread_spinon
	jthread_spinoff

KNOWN PROBLEMS
==============
The jthread interface requires that the macros GET_JTHREAD/SET_JTHREAD
and GET_COOKIE/SET_COOKIE store and retrieve per-thread information.
Right now, this information is maintained in a large BeOS "area" containing
an array of per_thread_info_t structures.  The info for a given thread
with thread id 'T' is simply (T % MAX_THREADS).  Naturally, since
successive calls to spawn_thread (invoked by jthread_create) will not
necessarily yield contiguous thread ids, the maximum number of jthreads
that can be successfully created will be somewhat less than MAX_THREADS.

The implementation of forkexec() in beos-native/syscalls.c makes use of
fork() instead of the recommended technique that uses load_image().

Profiling output is unavailable, due to an apparent bug that causes
BeOS to "forget" installed atexit() handlers when the main thread
executes exit_thread().

The gethostbyname() and gethostbyaddr() wrappers in beos-native/syscalls.c
are not thread-safe.

As of 08 Sep 1999, the 'ProcessClassStop' test fails on Kaffe/BeOS, as
well as on Kaffe/Linux.  Additionally, the 'KaffeVerifyBug',
'SoInterrupt', 'SoTimeout' and 'UDPTest' tests fail on Kaffe/BeOS when
run from the regression test suite, though not from the command line.
Test output suggests a linkage problem (libtool again?).  The 'GCTest'
test will also sometimes fail, with the main thread chugging along
and the finaliser and one or more user threads blocked indefinitely.

NOTES
=====
[1] "Locks and Condition Variables",
    http://www.cs.umd.edu/~hollings/cs412/s96/synch/locks.html
[2] Shortly after I applied Chris' corrections, he identified
    potential race problems in the new code; I've received a new set
    of corrections from him, which I'm currently testing.

REV HISTORY
===========
27 Jan 99 -- Submitted for inclusion into Kaffe, alanlb@cs.vt.edu
08 Feb 99 -- Fixed various segmentation violations
18 Mar 99 -- Implemented jcondvar_wait timeout, forkexec;
		fixed jthread_interrupt
22 Mar 99 -- Fixed socket read/write in beos-native/syscalls.c, redid
		thread cancellation (i.e., stoppage)
24 Mar 99 -- Fixed forkexec; ProcessTest now passes
26 Mar 99 -- Implemented most socket timeouts; SoTimeout now passes
28 Jul 99 -- Fixed condition variable code (thanks to Chris Tate of Be DTS)
31 Aug 99 -- Updated for JIT version 3


Documentation about cross language debugging support for Kaffe's JIT
By the University of Utah Flux Group <http://www.cs.utah.edu/flux>,
Mar 22, 2000
Updated Apr 22, 2003

Introduction
------------

Cross language debugging support allows developers to see Java
debugging information alongside C debugging information in GDB.  The
extra information can help regular debugging and is invaluable when
working with the jitter.  The implementation is basically an offshoot
of the xprofiler code.  Since the profiler already generated symbols
for the JIT'ed code it seemed easy enough to also generate `.stabs'
debugging information for gdb.  The result allows gdb to report the
file and line number of the current location in the code, however, the
implementation has some limitations:

  - Only line number debugging information is generated, variable
    locations and types aren't handled yet.

  - The debugging information is generated at runtime, so the output
    must be sent through an assembler and loaded into GDB.  We provide
    the macro 'xdb' in developers/gdbinit to ease this burden.

  - The java symbol names are mangled and only seem to be deciphered by
    gdb 4.18, and even then it doesn't always work.

  - You have to manually add the source directories since I can't
    figure out where to get them from the class structure.

  - JNI stubs, and other bits of code don't have debugging information
    attached, so no useful information can be reported.  Although,
    this shouldn't be very hard to add.

  - There may be some problems with backtracing not working properly,
    i don't know why though...


Configure
---------

The xdebugging code can be enabled by using the --enable-xdebugging
flag when running configure.


Usage
-----

The xdebugging output isn't generated unless the `-Xxdebug' or
`-Xxdebug_file' flags are specified on the command line.  The
`-Xxdebug' flag uses the default file name `xdb.as', while the other
flag takes the file name as an argument.  The generated file will have
symbols for JIT'ed functions and whatever line debugging information
that was taken from the java debugging information.  Finally, you can
load the file into gdb using 'xdb' or manually by running the output
through an assembler and loading it into gdb with 'add-symbol-file'

Example:

  > setenv KAFFE_DEBUG gdb
  > setenv KAFFE_DEBUG_TEMPFILE /tmp/kaffe.gdb
  > java -Xxdebug HelloWorld

  Copyright 1998 Free Software Foundation, Inc.
  GDB is free software, covered by the GNU General Public License, and you are
  welcome to change it and/or distribute copies of it under certain conditions.
  Type "show copying" to see the conditions.
  There is absolutely no warranty for GDB.  Type "show warranty" for details.
  This GDB was configured as "i386-redhat-linux".
  (gdb) run

  <something goes horribly horribly wrong>

  (gdb) xdb
  Current language:  auto; currently java
  (gdb) bt
  #0 0x8008329 in HelloWorld.main() at HelloWorld.java:12 
  ...


Implementation
--------------

Added Files:

  FAQ/FAQ.xdebugging: This file.

  kaffe/xprof/debugFile.*: Does the majority of the work in generating
    the assembler file with the debugging symbols.

  kaffe/xprof/mangle.*: Mangles the java method names into a GNU style
    format.

Modified Files:

  kaffe/kaffe/main.c: Added `-Xxdebug' and `-Xxdebug_file' command
    line args.

  kaffe/kaffevm/jit3/machine.c: Added code to generate debugging
    information for JIT'ed methods that had java debugging information.

Control Flow:

  When the jitter finishes processing a method and installs it, it
  will convert the java line debugging information from byte code
  references to native code references.  The xdebugging code simply
  takes these converted references and uses debugFile functions to
  generate the assembler directives.

Future:

  Add more debugging information, types and variable locations.

  Automate the process of getting the information into gdb. (DONE)

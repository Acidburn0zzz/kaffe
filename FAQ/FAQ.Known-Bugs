This file is a list of known bugs, short-comings and oddities.  
Treat it as an TODO list.

* javap java.lang.ThreadGroup outputs 'NUL' characters when used with
  Klasses.jar.

* java.net.Socket:

     getSoTimeout() 
     setSoTimeout(int) 	are not implemented.

* Win32/Cygnus stuff:

    Pavel Roskin writes:

    Can anybody explain me why the configuration files for cygwin are placed in
    config/i386/win32/cygnus, 4 levels below of the distibution root? All other
    configurations are placed 3 levels below, for example config/parisc/hpux or
    config/alpha/linux. I think, files from config/i386/win32/cygnus should be
    moved to config/i386/win32 while directory config/i386/win32/cygnus should
    be removed.
    It could be also useful to get latest config.sub and config.guess from
    ftp://alpha.gnu.org/gnu/libtool-1.2b.tar.gz. IMHO it is better to use
    official sources and do all non-official system name canonicalization (if
    somebody still needs it) in configure.in or somewhere else.

    Stan Bailes writes:

    I found that with cygwin b19, the stuff in config.guess doesn't work,
    and that the final case should be something like:

	i*86:CYGWIN32*:*:*)
	    echo i386-unknown-win32/cygnus
	    exit 0 ;;

* Automatically generate the external_wrappers.h files in native, net, 
  math, and zip with a sed script or equivalent.  This might require moving 
  TestNative.c elsewhere.

* Thread.interrupt() is not implemented properly.

* Add some architecture-specific stack pointer alignment macro.  Currently,
  alignment is sizeof (jlong); apparently, some architectures require more
  specific alignments.

*  Kaffe fails to work for several people under SunOS 4.1.3.  The error
  message seems to be "Can not find native library in path".  This problem
  is unclear: either a problem in the kaffe script that use @libdir@ and set 
  LD_LIBRARY_PATH (less likely), or a problem in the dynamic linking 
  mechanisms on this system.  Check the mailing list archive for more info.

* Object serialization is broken because Class UIDs are not computed.

* Several classes do not have serialVersionUIDs hard-coded in them. This
  makes these classes not interoperable with Sun's classes.  Note, however,
  that simply putting in Sun's will not fix that: in order to allow 
  interoperability, Sun would have to publish how the serialize objects
  such as hashtable.  According to Tim, Sun at some point promised to do
  that; it hasn't happened, though.

* Object serialization is buggy.  For the JKernel, the system goes in an
  infinite loop.  When we use Sun's java.io.* classes, it will work fine,
  except that non-transient floating point fields are not properly saved
  and restored using defaultWriteObject and defaultReadObject.  Weird. More
  investigation is needed.  (This is why java.util.Hashtable manually
  saves and restores its loadFactor.)  This is valid as of Jul 23, 1998.

* Kaffe does not currently provide its own implementation of RMI.


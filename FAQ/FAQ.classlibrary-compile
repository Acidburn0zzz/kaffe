
How do I compile the class library?
-----------------------------------

Cd to your build directory (the same as the source directory if you
did ./configure), then cd to libraries/javalib.

Type "make Klasses".

This will build the java libraries, put them in a Klasses.jar file
and overwrite the version in your source tree.  Type "make install"
to install the jar file in your target prefix.

If you have added or removed files from the javalib tree, you will have
to update Makefile.am, Makefile.in and Makefile. Do this as follows:

    $ cd ../..
    $ sh developers/autogen.sh
    $ ./configure

Please use the version of automake as described in FAQ.automake.
This version will minimize your diffs with the CVS tree as it is 
the version used by the kaffe developers.

If you want to rebuild not only Klasses.jar, but also the jar-files of
Kaffe extensions, type "make CLASSDIRS=all Klasses".

How do I set the compiler?
--------------------------

The ./configure script has the --with-jikes option. Not setting it at
all will use the included kjc Java compiler. Setting it to
--with-jikes=yes will use the jikes compiler if one can be found. You
can also specify the absolute path to a jikes executable using
--with-jikes=/absolute-path-to/jikes.

You can also use the absolute path to specify other Java
compilers. For example, in order to use gcj to compile the class
library, you would run ./configure --with-jikes=/path-to/gcj. The same
method can be applied to configure kaffe to compile the class library
using Sun's javac compiler, or any other Java compiler.

If you manage to compile kaffe's class library using a Java compiler
other than javac, kjc, jikes or gcj, please send a message to
kaffe@kaffe.org.

How do I pass flags to the compiler?
--------------------------------------

Use the JAVAC_FLAGS environment variable.

make JAVAC_FLAGS="-verbose"

will compile the class library with verbose messages about the
compilation process. Which flags you can set depends on the Java
compiler you use.

What compilers are known to work?
---------------------------------

* jikes

The preferred compiler is jikes. The URL for jikes is:

  http://www10.software.ibm.com/developerworks/opensource/jikes/

Please note that jikes 1.14 and 1.15 have bugs that result in a
miscompiled Klasses.jar file. If you use jikes 1.18, you need to pass
it the "-source 1.1" option. Jikes 1.18 generates class files for JDK
1.4 by default, and kaffe complains about an unknown version
number.

The recommended version of jikes is 1.18.

* kjc

The included compiler, kjc, also works. kjc is part of the Kopi project:

  http://www.dms.at/kopi/kjc.html

* javac 

Sun's javac compiler from JDK 1.3 and JDK 1.4 works as well. If you
are using javac from JDK 1.4, please make sure that you specify the
-target 1.1 option. Failing to do so will result in a lot of annoying
warning messages when you install and use the Klasses.jar file.

No known older version of Sun's javac compiler (up through JDK 1.2)
will compile Kaffe's classes, due to bugs that Sun has yet to fix.

What compilers are known not to work?
-------------------------------------

FSF's gcj doesn't work up to version 3.2.

In order to compile the class library with gcj to bytecodes instead of
native code, you need to pass it the "-C" flag. Unfortunately, gcj has
some bugs that prevent it from compiling kaffe's class library at the
moment.

If you have managed to compile the class library using any version of
gcj, please write to kaffe@kaffe.org.

How does the bootstrap process work with kjc?
---------------------------------------------

If you use the default Java compiler, kaffe will use the included kjc
compiler. Kjc is written in pure java, so kaffe will need to use some
precompiled classes inorder to be able to run kjc.

These precompiled classes are in the Klasses.jar.bootstrap file. It
also includes some classes, used by kaffeh to generate include files
for native methods.

So kaffe will compile its class library using kjc, and create the
rt.jar file.

How do I add classes to Klasses.jar.bootstrap?
----------------------------------------------

Just edit the bootstrap.classlist file. It is a list of class
files. Each entry must to end in '.class'. You can use the '#'
character to comment out lines.

After you have compiled the class library, run 'make bootstrap' to
update Klasses.jar.bootstrap.

How do I adapt the class library to my needs?
---------------------------------------------

If you are using kaffe on an embedded system, you may want to use only
a part of the functionality provided by the class library. For
example, you may not need JAXP or AWT on your system. So you shouldn't
have to waste space on the device by including classes you are not
going to use.

Kaffe supports user defined class library profiles. It works on two
levels of indirection: a profile file tells the build process where to
find lists of files to be compiled in a single compiler run. The
compiler then compiles the listed files.

Let's take a look at the default profile in
libraries/javalib/profiles/default/profile . It lists a few sets of
files needed to compile the class library. Among them there is a set
of files needed for AWT support, another for JAXP support etc.

Each of these sets is a simple list of java source files that should
be compiled together in a compiler run. They are passed to the
compiler using the @file-containing-a-list-of-sources option, so that
it works on systems with small maximal command line length.

In order to remove the AWT classes from your class library, you can
simply remove the line with awt.files from the profile.

In order to remove single classes from your class library, you can
remove them from the respective lists of files they are in. This may
cause the compilation of other classes to fail, so check the compiler
output to make sure the compilation still worked.

How do I add classes to a class library profile?
------------------------------------------------

If you want to add a class to specific compiler run, just add the path
to its source to the file listing the classes to be compiled in that
run.

If you want to add a set of classes, you should add a new compiler run
in the profile, and list paths to the sources in a separate file.

You should still consider adding the classes to Klasses_jar_SRCS in
order to have the changes automatically picked up by the build system.

How do I add my own class library profile?
------------------------------------------

Just make a new directory with your profile's name in
libraries/javalib/profiles and create a file named 'profile' in the
new directory.

In order to make your life easier, kaffe automatically compiles all
essential files needed for java.lang.Object using the list of files in
libraries/javalib/essential.files . So you don't have to re-list those
files, but doing so won't hurt. It just helps you to get started by
allowing you to focus on creating your library profile instead of
getting java.lang.Object to compile.

Kaffe also automatically takes care about picking the java.math
implementation.

You can use the minimal profile as your starting point. It compiles no
further files, beside those automatically compiled in. You can either
add the classes at once, and add more tofix any compiler error, or you
can use a tool like jakarta BCEL's transitive hull verifier on the
root class of your application and add all the classes it
traverses. That's what I did to get the list of essential files. I
started with java.lang.Object. If you are using BCEL's verifier, you
may need to add some interfaces by hand.

If you create some profiles that you consider to be of value for
others, please consider sending them to the Kaffe mailing list on
kaffe@kaffe.org .

How do I pick which class library profile to use?
-------------------------------------------------

The configure script has the option --with-class-library-profile,
which allows you to specify a profile to use for the class library.

Which profiles are available?
-----------------------------

Currently, there are three profiles available.

* default:

  Builds the whole class library. This profile is optimized for low
  memory consumption. The memory requirement to build the class
  library with this profile is about 20M using kjc.

* minimal:

  Builds only the classes required to compile java.lang.Object. It is
  useful as a starting point for adapting the class library to your
  needs.

* allatonce:

  Builds the whole class library in a single pass. This profile is
  optimized for speed, so it only invokes the compiler once on all
  source files. It uses more then 50M of memory with kjc.

If you write your own profiles, send them to the kaffe mailing list
kaffe@kaffe.org.

How do I use a precompiled class library?
-----------------------------------------

The configure script allows you to specify a precompiled rt.jar file
using the --with-rt-jar option. The specified jar file will be
installed as kaffe's class library.

That allows you to precompile kaffe's class library on a faster
platform than the one you're building on, for example.

You can not use the class library from another JVM.

Crashes during compilation of class library
-------------------------------------------

When kaffe crashes during compilation of class library, you should try
to compile the class library with jikes, or another Java compiler. Or
you can use a precompiled rt.jar.

You should first rebuild kaffe with --enable-debug, install it, set
KAFFE_DEBUG to the debugger of your choice, and try to rebuild kaffe
with kjc from the freshly installed, broken kaffe.

So if you're having problems with the JIT, you could configure kaffe
for rebuild using --with-jikes="/path/to/broken/kaffe -vmdebug
JIT,MOREJIT at.dms.kjc.Main". The extra output from the jit engine
should give you an idea where to start debugging.

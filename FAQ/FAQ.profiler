Profiler modifications to Kaffe's JIT system

Nathan M. Hanish
William E. Cohen

Instrumented Java Virtual Machine Overview:

What system does the instrumentation work with?

	Kaffe Virtual Machine, Version 1.0.4b with JIT Translator
	Intel Pentium(I,II,III,MMX,Pro),Celeron, or Xeon processor
		based system that provides the IA-32 timestamp register.
	Linux OS

What does the instrumentation record?

	A count of the total number of invocations for each method.
	The total amount of cpu time spend between the entry and exit of
		each method.
	The total amount of cpu time spend between the entry and exit of
		each of the methods children.
	The total amount of cpu time spend between the performing JIT
		translation of executed methods
	A timing resolution of 1 clock cycle.
	Low overhead, roughly 10 instructions per method invocation.

What doesn't the instrumentation provide?

	A call graph.
	Proper handling of exceptions and multithreaded code.
	Time spent in particular C functions called from Java.
	
How do to use the instrumentation?

	Install the latest version of the instrumented virtual machine.
	Execute kaffe with the -prof option.  The output is dumped to a file
	java.prof.

What is the format of the output?

	Each line of java.prof contains the profing information for one method.
	The fields are printed as human readable ASCII text and are separated
	by spaces. Each line has the following format:

	method_signature invocation_count child+self_time self_time JIT_time

How is the profiling implemented?

	Four fields added to the struture that describes each method:
		-Count of invocations
		-Time spent in self and children
		-Time spent in children
		-Time spent in JIT

	The JIT translator modified to produce additional inline code:
		Prologue:
			Increment count of invocations
			Subtract current time from time in self and children
		Epilogue:
			Add current time from time in self and children
		Calls:
			Read current time and subtract from time in child
			Call function
			Read current time and add to time in child

	Dumping data:
		profiler.c added to provide functions to dump profiling data.
		Added functions to classPool.c to allow iteration over entries
			in the hash table.

	Headers:
		md.h has the structure definition of the struct timeStamp,
			inline function to read the time stamp from C, and
			functions to convert data to and from the timeStamp
			format. Look at config/i386/linux/md.h for details.
		
		dumbprof.h had been developed to allow compilation of kaffe
			even if the profiling has not been developed for
			particular port. Include dumbprof.h in the md.h
			file. For an example, take a look at
			config/alpha/osf/md.h.
